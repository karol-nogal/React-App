{"ast":null,"code":"var _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\nimport React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from 'semantic-ui-react';\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSortByName = event => {\n      this.setState({\n        sortByName: event.target.value\n      });\n    };\n\n    this.handleSortByCity = event => {\n      this.setState({\n        sortByCity: event.target.value\n      });\n    };\n\n    this.handleDateChange = (event, date) => {\n      this.setState({\n        date: date.value\n      });\n      let pickedDate = new Date(this.state.date).getTime();\n      let gameDate = new Date(game.date).getTime();\n      let FilteredGamesByDate = game.filter(function (item) {\n        return gameDate === pickedDate;\n      });\n      this.setState({\n        games: FilteredGamesByDate\n      });\n    };\n\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      sortByName: \"\",\n      sortByCity: \"\",\n      sortByPlayerCount: \"\",\n      date: 0\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPlaysData();\n  }\n\n  fetchPlaysData() {\n    fetch(\"/plays.json\").then(resp => resp.json()).then(resp => this.setState({\n      games: resp,\n      loading: false\n    })).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  displayGameKind() {\n    return this.state.games.filter(game => game.title.toLowerCase().includes(this.state.sortByName.toLowerCase())).filter(game => game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase())).map(game => React.createElement(GameCard, {\n      key: game.id,\n      title: game.title,\n      localization: game.localization.place,\n      date: game.date,\n      playerMax: game.palyer.max,\n      playerCur: game.palyer.current,\n      reqLvl: game.ReqLevelID,\n      descript: game.Description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"massive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Loading\")));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(GameFilter, {\n      sortByName: this.handleSortByName,\n      sortByCity: this.handleSortByCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(SemanticDatepicker, {\n      onChange: this.handleDateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), console.log(this.state.date), React.createElement(Segment, {\n      inverted: true,\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      className: \"ui centered grid\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.displayGameKind()))));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Card","Dimmer","Loader","Segment","Container","GameCard","GameFilter","SemanticDatepicker","GameCardColection","Component","constructor","props","handleSortByName","event","setState","sortByName","target","value","handleSortByCity","sortByCity","handleDateChange","date","pickedDate","Date","state","getTime","gameDate","game","FilteredGamesByDate","filter","item","games","loading","error","sortByPlayerCount","componentDidMount","fetchPlaysData","fetch","then","resp","json","catch","displayGameKind","title","toLowerCase","includes","localization","city","map","id","place","palyer","max","current","ReqLevelID","Description","render","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {  Card, Dimmer, Loader, Segment, Container  } from 'semantic-ui-react'\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport SemanticDatepicker from \"react-semantic-ui-datepickers\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\n\nexport class GameCardColection extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            games:[],\n            loading: true,\n            error: null,\n            sortByName:\"\",\n            sortByCity:\"\",\n            sortByPlayerCount:\"\",\n            date:0\n        }\n    }\n    handleSortByName=(event)=>{\n      this.setState({\n        sortByName: event.target.value\n      })\n    }\n    handleSortByCity=(event)=>{\n      this.setState({\n        sortByCity: event.target.value\n      })\n    }\n    handleDateChange =(event, date)=> {\n      this.setState({date: date.value});\n      let pickedDate = new Date(this.state.date).getTime();\n      let gameDate = new Date(game.date).getTime();\n      let FilteredGamesByDate = game.filter(function(item){\n        return gameDate === pickedDate\n      });\n      this.setState({games:FilteredGamesByDate})\n    };\n    componentDidMount(){\n        this.fetchPlaysData()\n    }\n    fetchPlaysData(){\n        fetch(\"/plays.json\")\n            .then(resp=>resp.json())\n            .then(resp=>\n               this.setState({\n                    games: resp,\n                    loading:false\n               })) \n            .catch(error=>this.setState({\n                error:\"err occ\"\n            }))  \n    }\n    displayGameKind(){\n            return(\n              this.state.games\n              .filter(\n                game=>game.title.toLowerCase().includes(this.state.sortByName.toLowerCase()))\n              .filter(game=>game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase()))\n              .map(\n                game=>\n                <GameCard\n                  key={game.id}\n                  title={game.title}\n                  localization={game.localization.place}\n                  date={game.date}\n                  playerMax={game.palyer.max}  \n                  playerCur={game.palyer.current}  \n                  reqLvl={game.ReqLevelID}\n                  descript={game.Description}\n                />\n              )\n            )}\n    render(){\n      if(this.state.loading){\n        return(\n          <Segment>\n          <Dimmer active>\n            <Loader size='massive'>Loading</Loader>\n          </Dimmer>\n        </Segment>\n        )\n      }else return(\n            <div>\n                <GameFilter \n                sortByName={this.handleSortByName}\n                sortByCity={this.handleSortByCity}\n                />\n                <SemanticDatepicker onChange={this.handleDateChange}/>\n                {console.log(this.state.date)}\n                <Segment inverted color=\"blue\">\n                  <Container fluid>\n                  <Card.Group className=\"ui centered grid\" textAlign=\"center\">\n                    {this.displayGameKind()}\n                  </Card.Group>\n                  </Container>\n                </Segment>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}