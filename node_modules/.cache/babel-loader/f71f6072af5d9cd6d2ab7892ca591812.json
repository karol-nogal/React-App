{"ast":null,"code":"var _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\nimport React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from 'semantic-ui-react';\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSortByName = event => {\n      this.setState({\n        sortByName: event.target.value\n      });\n    };\n\n    this.handleSortByCity = event => {\n      this.setState({\n        sortByCity: event.target.value\n      });\n    };\n\n    this.handleDateChange = (event, date) => {\n      this.setState({\n        date: date.value\n      });\n    };\n\n    this.handleHideFullGames = () => {\n      this.setState(prevState => ({\n        hideFullGames: !prevState.hideFullGames\n      }));\n    };\n\n    this.gameFilters = this.state.games.filter(game => game.title.toLowerCase().includes(this.state.sortByName.toLowerCase())).filter(game => game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase())).filter(game => {\n      const pickedDate = new Date(this.state.date).getTime();\n      const pickedGameTostring = pickedDate.toString().substring(0, 6);\n      const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n      const gameDate = new Date(game.date).getTime();\n      const gameDateToString = gameDate.toString().substring(0, 6);\n      const gameDateBackToNumber = parseInt(gameDateToString);\n\n      if (!pickedDate) {\n        return this.state.games;\n      } else if (gameDateBackToNumber === pickedGameBacktoNumber) return game;\n    }).filter(game => {\n      if (this.state.hideFullGames) {\n        return this.state.games;\n      } else if (game.palyer.max !== game.palyer.current) {\n        return game;\n      }\n    });\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      sortByName: \"\",\n      sortByCity: \"\",\n      sortByPlayerCount: \"\",\n      date: 0,\n      hideFullGames: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPlaysData();\n  }\n\n  fetchPlaysData() {\n    fetch(\"/plays.json\").then(resp => resp.json()).then(resp => this.setState({\n      games: resp,\n      loading: false\n    })).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  displayGameKind() {\n    if (this.gameFilters.length < 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" Pusto\");\n    } else {\n      return this.gameFilters.map(game => React.createElement(GameCard, {\n        key: game.id,\n        title: game.title,\n        localizationCity: game.localization.city,\n        localizationPlace: game.localization.place,\n        date: game.date,\n        playerMax: game.palyer.max,\n        playerCur: game.palyer.current,\n        reqLvl: game.ReqLevelID,\n        descript: game.Description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }));\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"massive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Loading\")));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(GameFilter, {\n      sortByName: this.handleSortByName,\n      sortByCity: this.handleSortByCity,\n      onChange: this.handleDateChange,\n      onSlide: this.handleHideFullGames,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      center: true,\n      inverted: true,\n      color: \"teal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.displayGameKind()))));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Card","Dimmer","Loader","Segment","Container","GameCard","GameFilter","GameCardColection","Component","constructor","props","handleSortByName","event","setState","sortByName","target","value","handleSortByCity","sortByCity","handleDateChange","date","handleHideFullGames","prevState","hideFullGames","gameFilters","state","games","filter","game","title","toLowerCase","includes","localization","city","pickedDate","Date","getTime","pickedGameTostring","toString","substring","pickedGameBacktoNumber","parseInt","gameDate","gameDateToString","gameDateBackToNumber","palyer","max","current","loading","error","sortByPlayerCount","componentDidMount","fetchPlaysData","fetch","then","resp","json","catch","displayGameKind","length","map","id","place","ReqLevelID","Description","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {  Card, Dimmer, Loader, Segment, Container  } from 'semantic-ui-react'\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\n\nexport class GameCardColection extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            games:[],\n            loading: true,\n            error: null,\n            sortByName:\"\",\n            sortByCity:\"\",\n            sortByPlayerCount:\"\",\n            date:0,\n            hideFullGames: true\n        }\n    }\n    handleSortByName=(event)=>{\n      this.setState({\n        sortByName: event.target.value\n      })\n    }\n    handleSortByCity=(event)=>{\n      this.setState({\n        sortByCity: event.target.value\n      })\n    }\n    handleDateChange =(event, date)=> {\n      this.setState({date: date.value});\n    };\n    handleHideFullGames=()=>{\n      this.setState(prevState=>({\n        hideFullGames: !prevState.hideFullGames\n      }))\n    }\n    componentDidMount(){\n        this.fetchPlaysData()\n    }\n    fetchPlaysData(){\n        fetch(\"/plays.json\")\n            .then(resp=>resp.json())\n            .then(resp=>\n               this.setState({\n                    games: resp,\n                    loading:false\n               })) \n            .catch(error=>this.setState({\n                error:\"err occ\"\n            }))  \n    }\n    gameFilters =  this.state.games\n                        .filter(\n                          game=>game.title.toLowerCase().includes(this.state.sortByName.toLowerCase()))\n                        .filter(game=>game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase()))\n                        .filter(game=>{\n                          const pickedDate = new Date(this.state.date).getTime();\n                          const pickedGameTostring = pickedDate.toString().substring(0,6)\n                          const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n                          const gameDate= new Date(game.date).getTime();\n                          const gameDateToString = gameDate.toString().substring(0,6);\n                          const gameDateBackToNumber = parseInt(gameDateToString);\n                          if(!pickedDate){\n                            return this.state.games\n                          }else if(gameDateBackToNumber === pickedGameBacktoNumber)\n                            return game\n                        })\n                        .filter(game=>{\n                          if(this.state.hideFullGames){\n                            return this.state.games\n                            }else if(game.palyer.max !== game.palyer.current){\n                          return game}\n                        })\n    displayGameKind(){\n              if(this.gameFilters.length<0){\n                return(\n                  <div> Pusto</div>\n                )\n              }else {\n            return(\n              this.gameFilters\n              .map(\n                game=>\n                <GameCard\n                  key={game.id}\n                  title={game.title}\n                  localizationCity={game.localization.city}\n                  localizationPlace={game.localization.place}\n                  date={game.date}\n                  playerMax={game.palyer.max}  \n                  playerCur={game.palyer.current}  \n                  reqLvl={game.ReqLevelID}\n                  descript={game.Description}\n                />\n              )\n            )}}\n    render(){\n      if(this.state.loading){\n        return(\n          <Segment>\n          <Dimmer active>\n            <Loader size='massive'>Loading</Loader>\n          </Dimmer>\n        </Segment>\n        )\n      }else return(\n            <div>\n                <GameFilter \n                sortByName={this.handleSortByName}\n                sortByCity={this.handleSortByCity}\n                onChange={this.handleDateChange}\n                onSlide={this.handleHideFullGames}\n                />\n                <Segment center inverted color=\"teal\">\n                  <Container >\n                  <Card.Group centered>\n                    {this.displayGameKind()}\n                  </Card.Group>\n                  </Container>\n                </Segment>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}