{"ast":null,"code":"import _defineProperty from \"/home/karol/Desktop/Projekt/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/home/GamesChart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nconst COLORS = ['#0088FE', '#00E49F', '#8884d8', '#82ca9d'];\nconst RADIAN = Math.PI / 180;\n\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return React.createElement(\"text\", {\n    x: x,\n    y: y,\n    fill: \"white\",\n    textAnchor: x > cx ? 'start' : 'end',\n    dominantBaseline: \"central\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"\".concat((percent * 100).toFixed(0), \"%\"));\n};\n\nexport default class GamesChart extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playedGames: [],\n      kindsOfGames: [],\n      playedGamesByKind: [],\n      isLoading: true,\n      hasError: false,\n      error: ''\n    };\n  }\n\n  fetchPlayedGamesData() {\n    return fetch(\"/data/played-games.json\").then(response => response.json()).then(fetchedData => {\n      this.setState({\n        playedGames: fetchedData,\n        isLoading: false,\n        hasError: false,\n        error: ''\n      });\n    }).catch(error => {\n      this.setState({\n        hasError: true,\n        error: error\n      });\n    });\n  }\n\n  fetchKindsOfGamesData() {\n    return fetch(\"/data/kinds-of-games.json\").then(response => response.json()).then(fetchedData => {\n      this.setState({\n        kindsOfGames: fetchedData,\n        isLoading: false,\n        hasError: false,\n        error: ''\n      });\n    }).catch(error => {\n      this.setState({\n        hasError: true,\n        error: error\n      });\n    });\n  }\n\n  renderPlayedGamesByKindArr() {\n    const data = this.state.playedGames.map(game => {\n      return _objectSpread({}, game, {\n        name: this.state.kindsOfGames.find(kind => {\n          return kind.kindID === game.kindID;\n        }).kindName\n      });\n    });\n    this.setState({\n      playedGamesByKind: data\n    });\n  }\n\n  componentDidMount() {\n    Promise.all([this.fetchKindsOfGamesData(), this.fetchPlayedGamesData()]).then(() => {\n      this.renderPlayedGamesByKindArr();\n    });\n  }\n\n  renderColorfulLegendText(value, entry) {\n    const color = entry.color; //IDEA Change newUsers to New users here\n\n    return React.createElement(\"span\", {\n      style: {\n        color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, value);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Error! \", this.state.error);\n    }\n\n    ;\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Please wait, loading recently played games data...\");\n    }\n\n    ;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Number of games by type played last month\"), React.createElement(PieChart, {\n      width: 500,\n      height: 450,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Legend, {\n      verticalAlign: \"top\",\n      height: 30,\n      formatter: this.renderColorfulLegendText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Pie, {\n      data: this.state.playedGamesByKind,\n      cx: '50%',\n      cy: '50%',\n      labelLine: false,\n      label: renderCustomizedLabel,\n      outerRadius: 190,\n      fill: \"#8884d8\",\n      dataKey: \"playedGames\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.playedGamesByKind.map((entry, index) => React.createElement(Cell, {\n      key: \"cell-\".concat(index),\n      fill: COLORS[index % COLORS.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })))));\n  }\n\n}\nGamesChart.jsfiddleUrl = 'https://jsfiddle.net/alidingling/c9pL8k61/';\n;","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/home/GamesChart.js"],"names":["React","PureComponent","PieChart","Pie","Cell","Legend","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","index","radius","x","cos","y","sin","toFixed","GamesChart","constructor","props","state","playedGames","kindsOfGames","playedGamesByKind","isLoading","hasError","error","fetchPlayedGamesData","fetch","then","response","json","fetchedData","setState","catch","fetchKindsOfGamesData","renderPlayedGamesByKindArr","data","map","game","name","find","kind","kindID","kindName","componentDidMount","Promise","all","renderColorfulLegendText","value","entry","color","render","length","jsfiddleUrl"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\n\nconst COLORS = ['#0088FE', '#00E49F', '#8884d8', '#82ca9d'];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n}) => {\n   const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nexport default class GamesChart extends PureComponent {\n  constructor (props) {\n    super (props);\n    this.state = {\n      playedGames:[],\n      kindsOfGames: [],\n      playedGamesByKind: [],\n      isLoading: true,\n      hasError: false,\n      error: '',\n    };\n  };\n\n  fetchPlayedGamesData() {\n    return fetch(\"/data/played-games.json\")\n      .then( response => response.json())\n      .then( fetchedData => {\n        this.setState({\n          playedGames: fetchedData,\n          isLoading: false,\n          hasError: false,\n          error: '',\n        });\n      })\n      .catch( error => {\n        this.setState({\n          hasError: true,\n          error: error,\n        });\n      });\n  };\n\n  fetchKindsOfGamesData() {\n    return fetch(\"/data/kinds-of-games.json\")\n      .then( response => response.json())\n      .then( fetchedData => {\n        this.setState({\n          kindsOfGames: fetchedData,\n          isLoading: false,\n          hasError: false,\n          error: '',\n        });\n      })\n      .catch( error => {\n        this.setState({\n          hasError: true,\n          error: error,\n        });\n      });\n  };\n\n  renderPlayedGamesByKindArr() {\n    const data = this.state.playedGames.map( game => {\n      return {\n        ...game,\n        name: this.state.kindsOfGames.find( kind => {\n          return kind.kindID === game.kindID}).kindName,\n        }\n    });\n\n    this.setState({\n      playedGamesByKind: data,\n    })\n  };\n\n  componentDidMount() {\n      Promise.all([\n        this.fetchKindsOfGamesData(),\n        this.fetchPlayedGamesData(),\n        ])\n        .then(() => {this.renderPlayedGamesByKindArr();\n      });\n  };\n\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/c9pL8k61/';\n\n  renderColorfulLegendText (value, entry) {\n    const { color } = entry;\n    //IDEA Change newUsers to New users here\n    return <span style={{ color }}>{value}</span>;\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          Error! {this.state.error}\n        </div>\n      );\n    };\n    \n    if (this.state.isLoading) {\n      return (\n        <div>\n          Please wait, loading recently played games data...\n        </div>\n      );\n    };\n\n    return (\n      <div>\n        <div>Number of games by type played last month</div>\n        <PieChart width={500} height={450} >\n          <Legend verticalAlign=\"top\" height={30} formatter={this.renderColorfulLegendText}/>\n          <Pie\n            data={this.state.playedGamesByKind}\n            cx={'50%'}\n            cy={'50%'}\n            labelLine={false}\n            label={renderCustomizedLabel}\n            outerRadius={190}\n            fill=\"#8884d8\"\n            dataKey=\"playedGames\"\n          >\n            {\n              this.state.playedGamesByKind.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n            }\n          </Pie>\n        </PieChart>\n      </div>\n    );\n  };\n};"]},"metadata":{},"sourceType":"module"}