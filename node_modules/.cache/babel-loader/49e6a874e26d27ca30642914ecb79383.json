{"ast":null,"code":"function e(e, r) {\n  if (!r) return r;\n  var t = String(r).replace(/[^\\da-zA-Z\\n|]/g, \"\"),\n      l = e.split(/[^\\da-zA-Z\\n|]/g).filter(Boolean).map(function (e) {\n    return e.length;\n  }),\n      n = e.split(/[\\da-zA-Z\\n|]/g).filter(Boolean),\n      u = n[0];\n  return e.startsWith(u) ? n.reduce(function (e, r, t) {\n    var n = l[t],\n        u = e.value.slice(0, n),\n        a = e.value.slice(n);\n    return {\n      result: u ? e.result.concat(r, u) : e.result,\n      value: a\n    };\n  }, {\n    result: \"\",\n    value: t\n  }).result.slice(0, e.length) : l.reduce(function (e, r, t) {\n    var l = n[t] || \"\",\n        u = \"$1\" + l + \"$2\",\n        a = r + e.prevSlice + e.prevSeparator.length,\n        i = new RegExp(\"(.{\" + a + \"})(.)\");\n    return {\n      prevSeparator: l,\n      prevSlice: a,\n      value: e.value.replace(i, u)\n    };\n  }, {\n    prevSeparator: \"\",\n    prevSlice: 0,\n    value: t\n  }).value.slice(0, e.length);\n}\n\nexport default function (r, t) {\n  return void 0 === t ? function (t) {\n    return e(r, t);\n  } : e(r, t);\n}","map":null,"metadata":{},"sourceType":"module"}