{"ast":null,"code":"var _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\nimport React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from 'semantic-ui-react';\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport { Select } from 'semantic-ui-react';\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      this.setState({\n        value: event.target.value\n      });\n    };\n\n    this.gameTypeNames = this.state.gameTypes.map(type => ({\n      name: type.kindName\n    }));\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      value: \"\",\n      gameTypes: \"\"\n    };\n    this.gameTypeNames = this.gameTypeNames.bind();\n  }\n\n  componentDidMount() {\n    this.fetchPlaysData();\n    this.fetchGameTypeData();\n  }\n\n  fetchPlaysData() {\n    fetch(\"/plays.json\").then(resp => resp.json()).then(resp => this.setState({\n      games: resp,\n      loading: false\n    })).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  fetchGameTypeData() {\n    fetch(\"/data/kinds-of-games.json\").then(resp => resp.json()).then(resp => console.log(resp)).then(resp => this.setState({\n      gameTypes: resp\n    }));\n  }\n\n  displayGameKind() {\n    return this.state.games.filter(game => game.title.toLocaleLowerCase().includes(this.state.value.toLocaleLowerCase())).map(game => React.createElement(GameCard, {\n      key: game.id,\n      title: game.title,\n      localization: game.localization.place,\n      date: game.date,\n      playerMax: game.palyer.max,\n      playerCur: game.palyer.current,\n      reqLvl: game.ReqLevelID,\n      descript: game.Description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"massive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Loading\")));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(GameFilter, {\n      onChange: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Select, {\n      placeholder: \"Select type of the game\",\n      options: this.gameTypeNames(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(Segment, {\n      inverted: true,\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      className: \"ui centered rgrid\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.displayGameKind()))));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Card","Dimmer","Loader","Segment","Container","GameCard","GameFilter","Select","GameCardColection","Component","constructor","props","handleSubmit","event","setState","value","target","gameTypeNames","state","gameTypes","map","type","name","kindName","games","loading","error","bind","componentDidMount","fetchPlaysData","fetchGameTypeData","fetch","then","resp","json","catch","console","log","displayGameKind","filter","game","title","toLocaleLowerCase","includes","id","localization","place","date","palyer","max","current","ReqLevelID","Description","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {  Card, Dimmer, Loader, Segment, Container  } from 'semantic-ui-react'\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport { Select } from 'semantic-ui-react'\n\nexport class GameCardColection extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            games:[],\n            loading: true,\n            error: null,\n            value:\"\",\n            gameTypes: \"\"\n        }\n        this.gameTypeNames = this.gameTypeNames.bind()\n    }\n    handleSubmit=(event)=>{\n      this.setState({\n        value: event.target.value\n      })\n    }\n    componentDidMount(){\n        this.fetchPlaysData()\n        this.fetchGameTypeData()\n    }\n    fetchPlaysData(){\n        fetch(\"/plays.json\")\n            .then(resp=>resp.json())\n            .then(resp=>\n               this.setState({\n                    games: resp,\n                    loading:false\n               })) \n            .catch(error=>this.setState({\n                error:\"err occ\"\n            }))  \n    }\n    fetchGameTypeData(){\n      fetch(\"/data/kinds-of-games.json\")\n      .then(resp=>resp.json())\n      .then(resp=>console.log(resp))\n      .then(resp=>\n         this.setState({gameTypes: resp}))\n    }\n    gameTypeNames = this.state.gameTypes.map((type)=>({name :type.kindName}))\n    displayGameKind(){\n            return(\n              this.state.games\n              .filter(\n                game=>game.title.toLocaleLowerCase().includes(this.state.value.toLocaleLowerCase()))\n              .map(\n                game=>\n                <GameCard\n                  key={game.id}\n                  title={game.title}\n                  localization={game.localization.place}\n                  date={game.date}\n                  playerMax={game.palyer.max}  \n                  playerCur={game.palyer.current}  \n                  reqLvl={game.ReqLevelID}\n                  descript={game.Description}\n                />\n              )\n            )}\n    render(){\n      if(this.state.loading){\n        return(\n          <Segment>\n          <Dimmer active>\n            <Loader size='massive'>Loading</Loader>\n          </Dimmer>\n        </Segment>\n        )\n      }else return(\n            <div>\n                <Container>\n                <GameFilter onChange={this.handleSubmit}/>\n                <Select placeholder='Select type of the game'  options={this.gameTypeNames()} />\n                \n                </Container>\n                <Segment inverted color=\"blue\">\n                  <Container fluid>\n                  <Card.Group className=\"ui centered rgrid\" textAlign=\"center\">\n                    {this.displayGameKind()}\n                  </Card.Group>\n                  </Container>\n                </Segment>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}