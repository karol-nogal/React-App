{"ast":null,"code":"import _defineProperty from \"/home/karol/Desktop/Projekt/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from 'semantic-ui-react';\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSortByName = event => {\n      this.setState({\n        sortByName: event.target.value\n      });\n    };\n\n    this.handleSortByCity = event => {\n      this.setState({\n        sortByCity: event.target.value\n      });\n    };\n\n    this.handleDateChange = (event, date) => {\n      this.setState({\n        date: date.value\n      });\n    };\n\n    this.handleHideFullGames = () => {\n      this.setState(prevState => ({\n        hideFullGames: !prevState.hideFullGames\n      }));\n    };\n\n    this.handleOnAdd = () => {\n      this.fetchPlaysData();\n    };\n\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      sortByName: \"\",\n      sortByCity: \"\",\n      sortByPlayerCount: \"\",\n      date: 0,\n      hideFullGames: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPlaysData();\n  }\n\n  fetchPlaysData() {\n    fetch(\"https://fantasyapp-9473b.firebaseio.com/plays.json\").then(resp => resp.json()).then(resp => {\n      this.setState({\n        games: Object.keys(resp).map(function (key) {\n          return _objectSpread({\n            id: key\n          }, resp[key]);\n        }),\n        loading: false\n      });\n    }).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  render() {\n    const filteredGames = this.state.games.filter(game => game.title.toLowerCase().includes(this.state.sortByName.toLowerCase())).filter(game => game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase())).filter(game => {\n      const pickedDate = new Date(this.state.date).getTime();\n      const pickedGameTostring = pickedDate.toString().substring(0, 6);\n      const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n      const gameDate = new Date(game.date).getTime();\n      const gameDateToString = gameDate.toString().substring(0, 6);\n      const gameDateBackToNumber = parseInt(gameDateToString);\n\n      if (!pickedDate) {\n        return this.state.games;\n      } else if (gameDateBackToNumber === pickedGameBacktoNumber) return game;\n    }).filter(game => {\n      if (this.state.hideFullGames) {\n        return this.state.games;\n      } else if (game.palyer.max !== game.palyer.current) {\n        return game;\n      }\n    });\n\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        style: {\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Loading\")));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(GameFilter, {\n      onAdd: this.handleOnAdd,\n      sortByName: this.handleSortByName,\n      sortByCity: this.handleSortByCity,\n      onChange: this.handleDateChange,\n      onSlide: this.handleHideFullGames,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      center: true,\n      inverted: true,\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, filteredGames.length > 0 ? filteredGames.map(game => React.createElement(GameCard, {\n      key: game.id,\n      title: game.title,\n      localizationCity: game.localization.city,\n      localizationPlace: game.localization.place,\n      date: game.date,\n      playerMax: game.palyer.max,\n      playerCur: game.palyer.current,\n      reqLvl: game.ReqLevelID,\n      descript: game.Description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })) : React.createElement(Segment, {\n      color: \"pink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"WE CANNOT FIND WHAT YOU ARE LOOKING FOR\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Card","Dimmer","Loader","Segment","Container","GameCard","GameFilter","GameCardColection","Component","constructor","props","handleSortByName","event","setState","sortByName","target","value","handleSortByCity","sortByCity","handleDateChange","date","handleHideFullGames","prevState","hideFullGames","handleOnAdd","fetchPlaysData","state","games","loading","error","sortByPlayerCount","componentDidMount","fetch","then","resp","json","Object","keys","map","key","id","catch","render","filteredGames","filter","game","title","toLowerCase","includes","localization","city","pickedDate","Date","getTime","pickedGameTostring","toString","substring","pickedGameBacktoNumber","parseInt","gameDate","gameDateToString","gameDateBackToNumber","palyer","max","current","height","length","place","ReqLevelID","Description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {  Card, Dimmer, Loader, Segment, Container} from 'semantic-ui-react'\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\n\n\nexport class GameCardColection extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            games:[],\n            loading: true,\n            error: null,\n            sortByName:\"\",\n            sortByCity:\"\",\n            sortByPlayerCount:\"\",\n            date:0,\n            hideFullGames: true\n        }\n    }\n    handleSortByName=(event)=>{\n      this.setState({\n        sortByName: event.target.value\n      })\n    }\n    handleSortByCity=(event)=>{\n      this.setState({\n        sortByCity: event.target.value\n      })\n    }\n    handleDateChange =(event, date)=> {\n      this.setState({date: date.value});\n    };\n    handleHideFullGames=()=>{\n      this.setState(prevState=>({\n        hideFullGames: !prevState.hideFullGames\n      }))\n    }\n    componentDidMount(){\n        this.fetchPlaysData()\n    }\n    handleOnAdd = () => {\n      this.fetchPlaysData()\n    }\n    fetchPlaysData(){\n        fetch(\"https://fantasyapp-9473b.firebaseio.com/plays.json\")\n            .then(resp=>resp.json())\n            .then(resp=> {\n               this.setState({\n                    games:  Object.keys(resp)\n                    .map(function(key) {\n                        return {\n                            id: key,\n                            ...resp[key]\n                        }\n                    }),\n                    loading:false\n               })}) \n            .catch(error=>this.setState({\n                error:\"err occ\"\n            }))  \n    }\n  \n              \n  \n         \n    render(){\n          const filteredGames = this.state.games\n            .filter(\n              game=>game.title.toLowerCase().includes(this.state.sortByName.toLowerCase()))\n            .filter(game=>game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase()))\n            .filter(game=>{\n              const pickedDate = new Date(this.state.date).getTime();\n              const pickedGameTostring = pickedDate.toString().substring(0,6)\n              const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n              const gameDate= new Date(game.date).getTime();\n              const gameDateToString = gameDate.toString().substring(0,6);\n              const gameDateBackToNumber = parseInt(gameDateToString);\n              if(!pickedDate){\n                return this.state.games\n              }else if(gameDateBackToNumber === pickedGameBacktoNumber)\n                return game\n            })\n            .filter(game=>{\n              if(this.state.hideFullGames){\n                return this.state.games\n                }else if(game.palyer.max !== game.palyer.current){\n              return game}\n            })\n\n      if(this.state.loading){\n        return(\n          <Segment style={{height:\"500px\"}}>\n          <Dimmer active>\n            <Loader size='large'>Loading</Loader>\n          </Dimmer>\n        </Segment>\n        )\n      }else return(\n            <div>\n                <GameFilter \n                onAdd={this.handleOnAdd}\n                sortByName={this.handleSortByName}\n                sortByCity={this.handleSortByCity}\n                onChange={this.handleDateChange}\n                onSlide={this.handleHideFullGames}\n                />\n                <Segment center inverted color=\"blue\">\n                  <Container >\n                  <Card.Group centered>\n                    {filteredGames.length > 0 ? filteredGames.map(game=>\n                                                              <GameCard\n                                                                key={game.id}\n                                                                title={game.title}\n                                                                localizationCity={game.localization.city}\n                                                                localizationPlace={game.localization.place}\n                                                                date={game.date}\n                                                                playerMax={game.palyer.max}  \n                                                                playerCur={game.palyer.current}  \n                                                                reqLvl={game.ReqLevelID}\n                                                                descript={game.Description}\n                                                              />)\n                                                              :\n                                                              <Segment color={\"pink\"}>WE CANNOT FIND WHAT YOU ARE LOOKING FOR</Segment>}\n                  </Card.Group>\n                  </Container>\n                </Segment>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}