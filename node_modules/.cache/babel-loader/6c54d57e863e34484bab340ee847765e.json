{"ast":null,"code":"var _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\nimport React from \"react\";\nimport { Button, Card, Divider, Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\nimport { GameDetails } from \"./game-details/index\";\nexport class GameCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      games: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch(\"/plays.json\").then(resp => resp.json()).then(resp => this.setState({\n      games: resp,\n      loading: false\n    })).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  displayGameKind() {\n    return this.state.games.map(game => React.createElement(Card, {\n      key: game.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, game.title), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, game.localization.city), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(Card.Content, {\n      extra: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ui two buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Button, {\n      basic: true,\n      color: \"green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Approve\"), React.createElement(GameDetails, {\n      title: game.title,\n      localization: game.localization.place,\n      date: game.date,\n      playerMax: game.palyer.max,\n      playerCur: game.palyer.current,\n      reqLvl: game.ReqLevelID,\n      descript: game.Description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })))));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"massive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Loading\")), React.createElement(Image, {\n        src: \"https://react.semantic-ui.com/images/wireframe/short-paragraph.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(Image, {\n        src: \"https://react.semantic-ui.com/images/wireframe/short-paragraph.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Image, {\n        src: \"https://react.semantic-ui.com/images/wireframe/short-paragraph.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      margin: \"12px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.displayGameKind()));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Button","Card","Divider","Dimmer","Loader","Image","Segment","GameDetails","GameCard","Component","constructor","props","state","games","loading","error","componentDidMount","fetchData","fetch","then","resp","json","setState","catch","displayGameKind","map","game","id","title","localization","city","place","date","palyer","max","current","ReqLevelID","Description","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Card, Divider, Dimmer, Loader, Image, Segment  } from 'semantic-ui-react'\nimport {GameDetails} from \"./game-details/index\"\nexport class GameCard extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            games:[],\n            loading: true,\n            error: null,\n        }\n    }\n    componentDidMount(){\n        this.fetchData()\n    }\n    fetchData(){\n        fetch(\"/plays.json\")\n            .then(resp=>resp.json())\n            .then(resp=>\n               this.setState({\n                    games: resp,\n                    loading:false\n               })) \n            .catch(error=>this.setState({\n                error:\"err occ\"\n            }))  \n    }\n    displayGameKind(){\n            return(this.state.games.map(game=>\n    <Card key={game.id}>\n      <Card.Content>\n        <Card.Header textAlign=\"center\">{game.title}</Card.Header>\n        <Divider/>\n            <Card.Meta>{game.localization.city}</Card.Meta>\n        <Card.Description>\n              \n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <div className='ui two buttons'>\n          <Button basic color='green'>\n            Approve\n          </Button>\n         <GameDetails \n          title={game.title}\n          localization={game.localization.place}\n          date={game.date}\n          playerMax={game.palyer.max}  \n          playerCur={game.palyer.current}  \n          reqLvl={game.ReqLevelID}\n          descript={game.Description}\n         />\n        </div>\n      </Card.Content>\n    </Card> \n     ))\n    }\n    render(){\n      if(this.state.loading){\n        return(\n          <Segment>\n          <Dimmer active>\n            <Loader size='massive'>Loading</Loader>\n          </Dimmer>\n    \n          <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n          <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n          <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n        </Segment>\n        )\n      }else return(\n        \n            <div>\n                <Card.Group margin=\"12px\">\n                  {this.displayGameKind()}\n                </Card.Group>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}