{"ast":null,"code":"import _defineProperty from \"/home/karol/Desktop/Projekt/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/karol/Desktop/Projekt/app/src/menu/games/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from \"semantic-ui-react\";\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSortByName = event => {\n      this.setState({\n        sortByName: event.target.value\n      });\n    };\n\n    this.handleSortByCity = event => {\n      this.setState({\n        sortByCity: event.target.value\n      });\n    };\n\n    this.handleDateChange = (event, date) => {\n      this.setState({\n        date: date.value\n      });\n    };\n\n    this.handleHideFullGames = () => {\n      this.setState(prevState => ({\n        hideFullGames: !prevState.hideFullGames\n      }));\n    };\n\n    this.handleOnAdd = () => {\n      this.fetchPlaysData();\n    };\n\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      sortByName: \"\",\n      sortByCity: \"\",\n      sortByPlayerCount: \"\",\n      date: 0,\n      hideFullGames: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPlaysData();\n  }\n\n  fetchPlaysData() {\n    fetch(\"https://fantasyapp-9473b.firebaseio.com/plays.json\").then(resp => resp.json()).then(resp => {\n      this.setState({\n        games: Object.keys(resp).map(function (key) {\n          return _objectSpread({\n            id: key\n          }, resp[key]);\n        }),\n        loading: false\n      });\n    }).catch(error => this.setState({\n      error: \"err occ\"\n    }));\n  }\n\n  render() {\n    const filteredGames = this.state.games.filter(game => game.title.toLowerCase().includes(this.state.sortByName.toLowerCase())).filter(game => game.localization.city.toLowerCase().includes(this.state.sortByCity.toLowerCase())).filter(game => {\n      const pickedDate = new Date(this.state.date).getTime();\n      const pickedGameTostring = pickedDate.toString().substring(0, 6);\n      const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n      const gameDate = new Date(game.date).getTime();\n      const gameDateToString = gameDate.toString().substring(0, 6);\n      const gameDateBackToNumber = parseInt(gameDateToString);\n\n      if (!pickedDate) {\n        return this.state.games;\n      } else if (gameDateBackToNumber === pickedGameBacktoNumber) return game;\n    }).filter(game => {\n      if (this.state.hideFullGames) {\n        return this.state.games;\n      } else if (game.palyer.max !== game.palyer.current) {\n        return game;\n      }\n    });\n\n    if (this.state.loading) {\n      return React.createElement(Segment, {\n        style: {\n          height: \"500px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Dimmer, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Loading\")));\n    } else return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(GameFilter, {\n      onAdd: this.handleOnAdd,\n      sortByName: this.handleSortByName,\n      sortByCity: this.handleSortByCity,\n      onChange: this.handleDateChange,\n      onSlide: this.handleHideFullGames,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      center: true,\n      inverted: true,\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, filteredGames.length > 0 ? filteredGames.map(game => React.createElement(GameCard, {\n      key: game.id,\n      title: game.title,\n      localizationCity: game.localization.city,\n      localizationPlace: game.localization.place,\n      date: game.date,\n      playerMax: game.palyer.max,\n      playerCur: game.palyer.current,\n      reqLvl: game.ReqLevelID,\n      descript: game.Description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })) : React.createElement(Segment, {\n      inverted: true,\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"WE CANNOT FIND WHAT YOU ARE LOOKING FOR\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/karol/Desktop/Projekt/app/src/menu/games/index.js"],"names":["React","Card","Dimmer","Loader","Segment","Container","GameCard","GameFilter","GameCardColection","Component","constructor","props","handleSortByName","event","setState","sortByName","target","value","handleSortByCity","sortByCity","handleDateChange","date","handleHideFullGames","prevState","hideFullGames","handleOnAdd","fetchPlaysData","state","games","loading","error","sortByPlayerCount","componentDidMount","fetch","then","resp","json","Object","keys","map","key","id","catch","render","filteredGames","filter","game","title","toLowerCase","includes","localization","city","pickedDate","Date","getTime","pickedGameTostring","toString","substring","pickedGameBacktoNumber","parseInt","gameDate","gameDateToString","gameDateBackToNumber","palyer","max","current","height","length","place","ReqLevelID","Description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card, Dimmer, Loader, Segment, Container } from \"semantic-ui-react\";\nimport GameCard from \"./game-card/GameCard.js\";\nimport GameFilter from \"./game-filter/GameFilter.js\";\nimport \"react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css\";\n\nexport class GameCardColection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      games: [],\n      loading: true,\n      error: null,\n      sortByName: \"\",\n      sortByCity: \"\",\n      sortByPlayerCount: \"\",\n      date: 0,\n      hideFullGames: true\n    };\n  }\n  handleSortByName = event => {\n    this.setState({\n      sortByName: event.target.value\n    });\n  };\n  handleSortByCity = event => {\n    this.setState({\n      sortByCity: event.target.value\n    });\n  };\n  handleDateChange = (event, date) => {\n    this.setState({ date: date.value });\n  };\n  handleHideFullGames = () => {\n    this.setState(prevState => ({\n      hideFullGames: !prevState.hideFullGames\n    }));\n  };\n  componentDidMount() {\n    this.fetchPlaysData();\n  }\n  handleOnAdd = () => {\n    this.fetchPlaysData();\n  };\n  fetchPlaysData() {\n    fetch(\"https://fantasyapp-9473b.firebaseio.com/plays.json\")\n      .then(resp => resp.json())\n      .then(resp => {\n        this.setState({\n          games: Object.keys(resp).map(function(key) {\n            return {\n              id: key,\n              ...resp[key]\n            };\n          }),\n          loading: false\n        });\n      })\n      .catch(error =>\n        this.setState({\n          error: \"err occ\"\n        })\n      );\n  }\n\n  render() {\n    const filteredGames = this.state.games\n      .filter(game =>\n        game.title.toLowerCase().includes(this.state.sortByName.toLowerCase())\n      )\n      .filter(game =>\n        game.localization.city\n          .toLowerCase()\n          .includes(this.state.sortByCity.toLowerCase())\n      )\n      .filter(game => {\n        const pickedDate = new Date(this.state.date).getTime();\n        const pickedGameTostring = pickedDate.toString().substring(0, 6);\n        const pickedGameBacktoNumber = parseInt(pickedGameTostring);\n        const gameDate = new Date(game.date).getTime();\n        const gameDateToString = gameDate.toString().substring(0, 6);\n        const gameDateBackToNumber = parseInt(gameDateToString);\n        if (!pickedDate) {\n          return this.state.games;\n        } else if (gameDateBackToNumber === pickedGameBacktoNumber) return game;\n      })\n      .filter(game => {\n        if (this.state.hideFullGames) {\n          return this.state.games;\n        } else if (game.palyer.max !== game.palyer.current) {\n          return game;\n        }\n      });\n\n    if (this.state.loading) {\n      return (\n        <Segment style={{ height: \"500px\" }}>\n          <Dimmer active>\n            <Loader size=\"large\">Loading</Loader>\n          </Dimmer>\n        </Segment>\n      );\n    } else\n      return (\n        <div>\n          <GameFilter\n            onAdd={this.handleOnAdd}\n            sortByName={this.handleSortByName}\n            sortByCity={this.handleSortByCity}\n            onChange={this.handleDateChange}\n            onSlide={this.handleHideFullGames}\n          />\n          <Segment center inverted color=\"blue\">\n            <Container>\n              <Card.Group centered>\n                {filteredGames.length > 0 ? (\n                  filteredGames.map(game => (\n                    <GameCard\n                      key={game.id}\n                      title={game.title}\n                      localizationCity={game.localization.city}\n                      localizationPlace={game.localization.place}\n                      date={game.date}\n                      playerMax={game.palyer.max}\n                      playerCur={game.palyer.current}\n                      reqLvl={game.ReqLevelID}\n                      descript={game.Description}\n                    />\n                  ))\n                ) : (\n                  <Segment inverted color={\"red\"}>\n                    WE CANNOT FIND WHAT YOU ARE LOOKING FOR\n                  </Segment>\n                )}\n              </Card.Group>\n            </Container>\n          </Segment>\n        </div>\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}