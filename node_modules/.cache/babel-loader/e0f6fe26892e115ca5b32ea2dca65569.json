{"ast":null,"code":"import isValid from 'date-fns/is_valid';\nimport formatStringByPattern from 'format-string-by-pattern';\nimport React, { Fragment } from 'react';\nimport isEqual from 'react-fast-compare';\nimport format from 'date-fns/format';\nimport isBefore from 'date-fns/is_before';\nimport startOfDay from 'date-fns/start_of_day';\nimport parse from 'date-fns/parse';\nimport Dayzed from 'dayzed';\nimport compareAsc from 'date-fns/compare_asc';\nimport isSameDay from 'date-fns/is_same_day';\nimport cn from 'classnames';\nimport { Button, Segment, Form, Icon } from 'semantic-ui-react';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar dateFnsV2 = {\n  parse: parse\n};\n\nvar isSelectable = function isSelectable(date, minDate, maxDate) {\n  if (minDate && isBefore(date, minDate) || maxDate && isBefore(maxDate, date)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getToday = function getToday(minDate, maxDate) {\n  var today = new Date();\n  return {\n    date: startOfDay(today),\n    selectable: isSelectable(today, minDate, maxDate),\n    selected: false,\n    today: true\n  };\n};\n\nvar formatDate = function formatDate(date, dateFormat) {\n  return date ? format(startOfDay(date), dateFormat) : undefined;\n};\n\nvar omit = function omit(keysToOmit, obj) {\n  var newObj = _extends({}, obj);\n\n  keysToOmit.forEach(function (key) {\n    return delete newObj[key];\n  });\n  return newObj;\n};\n\nvar pick = function pick(keysToPick, obj) {\n  var newObj = {};\n  keysToPick.forEach(function (key) {\n    newObj[key] = obj[key];\n  });\n  return newObj;\n};\n\nvar moveElementsByN = function moveElementsByN(n, arr) {\n  return arr.slice(n).concat(arr.slice(0, n));\n};\n\nvar formatSelectedDate = function formatSelectedDate(selectedDate, dateFormat) {\n  if (!selectedDate) {\n    return '';\n  }\n\n  return Array.isArray(selectedDate) ? selectedDate.map(function (date) {\n    return formatDate(date, dateFormat);\n  }).join(' - ') : formatDate(selectedDate, dateFormat);\n};\n\nvar parseFormatString = function parseFormatString(formatString) {\n  return formatString.replace(/[D, Y]/gi, function (a) {\n    return a.toLowerCase();\n  });\n};\n\nvar parseOnBlur = function parseOnBlur(typedValue, formatString, isRangeInput) {\n  var parsedFormatString = parseFormatString(formatString);\n\n  if (isRangeInput) {\n    var rangeValues = typedValue.split(' - ');\n    return rangeValues // @ts-ignore\n    .map(function (value) {\n      return dateFnsV2.parse(value, parsedFormatString, new Date());\n    }).sort(function (a, b) {\n      return a > b ? 1 : -1;\n    });\n  } // @ts-ignore\n\n\n  return dateFnsV2.parse(typedValue, parsedFormatString, new Date());\n};\n\nvar onlyNumbers = function onlyNumbers(value) {\n  if (value === void 0) {\n    value = '';\n  }\n\n  return value.replace(/[^\\d]/g, '');\n};\n\nfunction getShortDate(date) {\n  if (!date) {\n    return undefined;\n  }\n\n  return date.toISOString().slice(0, 10);\n}\n/**\r\n * This is intended to be used to compose event handlers\r\n * They are executed in order until one of them calls\r\n * `event.preventDefault()`. Not sure this is the best\r\n * way to do this, but it seems legit...\r\n * @param {Function} fns the event hanlder functions\r\n * @return {Function} the event handler to add to an element\r\n */\n\n\nfunction composeEventHandlers() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return fns.some(function (fn) {\n      if (fn) {\n        fn.apply(void 0, [event].concat(args));\n      }\n\n      return event.defaultPrevented;\n    });\n  };\n}\n/**\r\n * Create an event handler for keyboard key given a config map\r\n * of event handlers\r\n * @param {Object} config consists of left, right, up, and down\r\n * @return {Function} the event handler to handle keyboard key\r\n */\n\n\nfunction getArrowKeyHandlers(config) {\n  return function (event) {\n    var keyCode = event.keyCode;\n    var fn = {\n      37: config.left,\n      39: config.right,\n      38: config.up,\n      40: config.down\n    }[keyCode];\n\n    if (fn) {\n      fn(event);\n    }\n  };\n}\n/**\r\n * Checks if a given date is with date range\r\n * @param {Array} range the range array with upper and lower bound\r\n * @param {Date} date a given date\r\n * @return {Boolean} true if date is in the range, false otherwise\r\n */\n\n\nfunction isInRange(range, date) {\n  return range.length === 2 && range[0] <= date && range[1] >= date;\n}\n\nvar BaseDatePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(BaseDatePicker, _React$Component);\n\n  function BaseDatePicker() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      offset: 0\n    };\n    _this.rootNode = React.createRef();\n    _this.handleArrowKeys = getArrowKeyHandlers({\n      left: function left() {\n        _this.getKeyOffset(-1);\n      },\n      right: function right() {\n        _this.getKeyOffset(1);\n      },\n      up: function up() {\n        _this.getKeyOffset(-7);\n      },\n      down: function down() {\n        _this.getKeyOffset(7);\n      }\n    });\n\n    _this.setRootNode = function (ref) {\n      _this.rootNode = ref;\n    };\n\n    _this.getRootProps = function (_temp) {\n      var _extends2;\n\n      var _ref = _temp === void 0 ? {} : _temp,\n          _ref$refKey = _ref.refKey,\n          refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n          rest = _objectWithoutPropertiesLoose(_ref, [\"refKey\"]);\n\n      return _extends((_extends2 = {}, _extends2[refKey] = _this.setRootNode, _extends2.onKeyDown = _this.handleArrowKeys, _extends2), rest);\n    };\n\n    _this._handleOffsetChanged = function (offset) {\n      _this.setState({\n        offset: offset\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = BaseDatePicker.prototype;\n\n  _proto.getKeyOffset = function getKeyOffset(number) {\n    if (!this.rootNode.current) {\n      return;\n    }\n\n    var e = document.activeElement;\n    var buttons = this.rootNode.current.querySelectorAll('button');\n    buttons.forEach(function (el, i) {\n      var newNodeKey = i + number;\n\n      if (el === e) {\n        if (newNodeKey <= buttons.length - 1 && newNodeKey >= 0) {\n          buttons[newNodeKey].focus();\n        } else {\n          buttons[0].focus();\n        }\n      }\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      this._handleOffsetChanged(0);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n    return React.createElement(Dayzed, Object.assign({}, rest, {\n      offset: this.state.offset,\n      onOffsetChanged: this._handleOffsetChanged,\n      render: function render(renderProps) {\n        return children(_extends({}, renderProps, {\n          getRootProps: _this2.getRootProps\n        }));\n      }\n    }));\n  };\n\n  return BaseDatePicker;\n}(React.Component);\n\nvar DatePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DatePicker, _React$Component);\n\n  function DatePicker() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n\n    _this._handleOnDateSelected = function (_ref, event) {\n      var selectable = _ref.selectable,\n          date = _ref.date;\n      var _this$props = _this.props,\n          selectedDate = _this$props.selected,\n          onChange = _this$props.onChange;\n\n      if (!selectable) {\n        return;\n      }\n\n      var newDate = date;\n\n      if (selectedDate && selectedDate.getTime() === date.getTime()) {\n        newDate = null;\n      }\n\n      if (onChange) {\n        onChange(event, newDate);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = DatePicker.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(BaseDatePicker, Object.assign({}, this.props, {\n      onDateSelected: this._handleOnDateSelected\n    }));\n  };\n\n  return DatePicker;\n}(React.Component);\n\nvar RangeDatePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(RangeDatePicker, _React$Component);\n\n  function RangeDatePicker() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.state = {\n      hoveredDate: null\n    };\n\n    _this.setHoveredDate = function (date) {\n      _this.setState(function (state) {\n        return state.hoveredDate === date ? null : {\n          hoveredDate: date\n        };\n      });\n    }; // Calendar level\n\n\n    _this.onMouseLeave = function () {\n      _this.setHoveredDate(null);\n    };\n\n    _this._handleOnDateSelected = function (_ref, event) {\n      var selectable = _ref.selectable,\n          date = _ref.date;\n      var _this$props = _this.props,\n          selectedDates = _this$props.selected,\n          onChange = _this$props.onChange;\n\n      if (!selectable) {\n        return;\n      }\n\n      var dateTime = date.getTime();\n      var newDates = [].concat(selectedDates);\n\n      if (selectedDates.length) {\n        if (selectedDates.length === 1) {\n          var firstTime = selectedDates[0].getTime();\n\n          if (firstTime < dateTime) {\n            newDates.push(date);\n          } else {\n            newDates.unshift(date);\n          }\n        } else if (newDates.length === 2) {\n          newDates = [date];\n        }\n      } else {\n        newDates.push(date);\n      }\n\n      if (onChange) {\n        onChange(event, newDates);\n      }\n\n      if (newDates.length === 2) {\n        _this.setHoveredDate(null);\n      }\n    };\n\n    _this.getEnhancedDateProps = function (getDateProps, dateBounds, _ref2) {\n      var onMouseEnter = _ref2.onMouseEnter,\n          onFocus = _ref2.onFocus,\n          restProps = _objectWithoutPropertiesLoose(_ref2, [\"onMouseEnter\", \"onFocus\"]);\n\n      var hoveredDate = _this.state.hoveredDate;\n      var date = restProps.dateObj.date;\n      return getDateProps(_extends({}, restProps, {\n        inRange: isInRange(dateBounds, date),\n        start: dateBounds[0] && isSameDay(dateBounds[0], date),\n        end: dateBounds[1] && isSameDay(dateBounds[1], date),\n        // @ts-ignore\n        hovered: hoveredDate && isSameDay(hoveredDate, date),\n        onMouseEnter: composeEventHandlers(onMouseEnter, function () {\n          _this.onHoverFocusDate(date);\n        }),\n        onFocus: composeEventHandlers(onFocus, function () {\n          _this.onHoverFocusDate(date);\n        })\n      }));\n    };\n\n    _this.getEnhancedRootProps = function (getRootProps, props) {\n      return getRootProps(_extends({}, props, {\n        onMouseLeave: _this.onMouseLeave\n      }));\n    };\n\n    return _this;\n  } // Date level\n\n\n  var _proto = RangeDatePicker.prototype;\n\n  _proto.onHoverFocusDate = function onHoverFocusDate(date) {\n    if (this.props.selected.length !== 1) {\n      return;\n    }\n\n    this.setHoveredDate(date);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"children\"]);\n\n    var hoveredDate = this.state.hoveredDate;\n    var selected = this.props.selected;\n    var dateBounds = selected.length === 2 || !selected.length || !hoveredDate ? selected : // prettier-ignore\n    // @ts-ignore\n    [selected[0], hoveredDate].sort(compareAsc);\n    return React.createElement(BaseDatePicker, Object.assign({}, rest, {\n      onDateSelected: this._handleOnDateSelected\n    }), function (_ref3) {\n      var getRootProps = _ref3.getRootProps,\n          getDateProps = _ref3.getDateProps,\n          renderProps = _objectWithoutPropertiesLoose(_ref3, [\"getRootProps\", \"getDateProps\"]);\n\n      return children(_extends({}, renderProps, {\n        getRootProps: _this2.getEnhancedRootProps.bind(_this2, getRootProps),\n        getDateProps: _this2.getEnhancedDateProps.bind(_this2, getDateProps, dateBounds)\n      }));\n    });\n  };\n\n  return RangeDatePicker;\n}(React.Component);\n\nRangeDatePicker.defaultProps = {\n  selected: []\n};\n\nvar CustomButton = function CustomButton(_ref) {\n  var icon = _ref.icon,\n      otherProps = _objectWithoutPropertiesLoose(_ref, [\"icon\"]);\n\n  return React.createElement(Button, Object.assign({\n    basic: true,\n    compact: true,\n    icon: icon\n  }, otherProps));\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".clndr-cell{background-color:#fff;-webkit-transition:all .2s;transition:all .2s;padding:5px 0;height:30px;cursor:pointer}.clndr-cell:hover{background-color:#cacbcd;color:inherit}.clndr-cell-today{background-color:#e0e1e2}.clndr-cell-inrange{background-color:#cacbcd;color:inherit}.clndr-cell-disabled{cursor:default;opacity:.45}.clndr-cell-disabled:hover{background-color:#fff}.clndr-cell-selected{background-color:#4f4f4f;color:#f2f2f2}.clndr-cell-other-month{color:#d9d9d9}\";\nstyleInject(css);\n\nvar CalendarCell = function CalendarCell(_ref) {\n  var inRange = _ref.inRange,\n      nextMonth = _ref.nextMonth,\n      prevMonth = _ref.prevMonth,\n      selectable = _ref.selectable,\n      selected = _ref.selected,\n      today = _ref.today,\n      otherProps = _objectWithoutPropertiesLoose(_ref, [\"end\", \"hovered\", \"inRange\", \"nextMonth\", \"prevMonth\", \"selectable\", \"selected\", \"start\", \"today\"]);\n\n  return React.createElement(\"span\", Object.assign({\n    className: cn('clndr-cell', {\n      'clndr-cell-today': today,\n      'clndr-cell-disabled': !selectable,\n      'clndr-cell-other-month': nextMonth || prevMonth,\n      'clndr-cell-inrange': inRange,\n      'clndr-cell-selected': selected\n    })\n  }, otherProps));\n};\n\nCalendarCell.defaultProps = {\n  end: false,\n  hovered: false,\n  inRange: false,\n  nextMonth: false,\n  prevMonth: false,\n  start: false\n};\nvar style = {\n  marginTop: 10\n};\n\nvar TodayButton = function TodayButton(_ref) {\n  var otherProps = _objectWithoutPropertiesLoose(_ref, [\"end\", \"hovered\", \"inRange\", \"selectable\", \"selected\", \"start\", \"today\"]);\n\n  return React.createElement(Button, Object.assign({\n    className: \"clndr-button-today\",\n    compact: true,\n    \"data-testid\": \"datepicker-today-button\",\n    fluid: true,\n    style: style\n  }, otherProps));\n};\n\nvar css$1 = \".clndr-calendars-segment{text-align:center;position:absolute!important;margin-top:.25rem!important;z-index:2000}.clndr-calendars-wrapper{display:grid;grid-gap:1em;grid-template-columns:repeat(var(--n,1),1fr)}.clndr-control{display:grid;grid-template-columns:repeat(3,1fr);margin-bottom:10px;-webkit-box-align:center;align-items:center}.clndr-days{text-align:center;display:grid;grid-gap:1px;grid-template-columns:repeat(7,2.2rem);background-color:rgba(0,0,0,.1);border:1px solid rgba(0,0,0,.1);border-radius:.28571429rem}.clndr-left{left:0}.clndr-right{right:0}.clndr-top{bottom:100%}.clndr-bottom{top:100%}.clndr-calendars-segment.clndr-top{box-shadow:0 -1px 2px 0 rgba(34,36,38,.15)!important;margin-bottom:.25rem!important}\";\nstyleInject(css$1);\nvar styles = {\n  leftBtn: {\n    textAlign: 'start'\n  },\n  rightBtn: {\n    textAlign: 'end'\n  }\n};\nvar pointings = {\n  'top left': 'clndr-top clndr-left',\n  'top right': 'clndr-top clndr-right',\n  left: 'clndr-left',\n  right: 'clndr-right'\n};\n\nvar Calendar = function Calendar(_ref) {\n  var calendars = _ref.calendars,\n      filterDate = _ref.filterDate,\n      getBackProps = _ref.getBackProps,\n      getDateProps = _ref.getDateProps,\n      getForwardProps = _ref.getForwardProps,\n      maxDate = _ref.maxDate,\n      minDate = _ref.minDate,\n      months = _ref.months,\n      nextMonth = _ref.nextMonth,\n      nextYear = _ref.nextYear,\n      previousMonth = _ref.previousMonth,\n      previousYear = _ref.previousYear,\n      showToday = _ref.showToday,\n      todayButton = _ref.todayButton,\n      weekdays = _ref.weekdays,\n      pointing = _ref.pointing;\n  return React.createElement(Segment, {\n    className: cn('clndr-calendars-segment', pointings[pointing])\n  }, React.createElement(\"div\", {\n    className: \"clndr-calendars-wrapper\",\n    style: {\n      '--n': calendars.length\n    }\n  }, calendars.map(function (calendar, calendarIdx) {\n    return React.createElement(\"div\", {\n      key: calendar.year + \"-\" + calendar.month\n    }, React.createElement(\"div\", {\n      className: \"clndr-control\"\n    }, React.createElement(\"div\", {\n      style: styles.leftBtn\n    }, calendarIdx === 0 && React.createElement(Fragment, null, React.createElement(CustomButton, Object.assign({\n      icon: \"angle double left\",\n      title: previousYear\n    }, getBackProps({\n      calendars: calendars,\n      offset: 12\n    }))), React.createElement(CustomButton, Object.assign({\n      icon: \"angle left\",\n      style: {\n        marginRight: 0\n      },\n      title: previousMonth\n    }, getBackProps({\n      calendars: calendars\n    }))))), React.createElement(\"span\", {\n      title: months[calendar.month] + \" \" + calendar.year\n    }, months[calendar.month].slice(0, 3), \" \", calendar.year), React.createElement(\"div\", {\n      style: styles.rightBtn\n    }, calendarIdx === calendars.length - 1 && React.createElement(Fragment, null, React.createElement(CustomButton, Object.assign({\n      icon: \"angle right\",\n      title: nextMonth\n    }, getForwardProps({\n      calendars: calendars\n    }))), React.createElement(CustomButton, Object.assign({\n      icon: \"angle double right\",\n      style: {\n        marginRight: 0\n      },\n      title: nextYear\n    }, getForwardProps({\n      calendars: calendars,\n      offset: 12\n    })))))), React.createElement(\"div\", {\n      className: \"clndr-days\"\n    }, weekdays.map(function (weekday) {\n      return React.createElement(CalendarCell, {\n        key: calendar.year + \"-\" + calendar.month + \"-\" + weekday,\n        title: weekday\n      }, weekday.slice(0, 2));\n    }), calendar.weeks.map(function (week) {\n      return week.map(function (dateObj, weekIdx) {\n        var key = calendar.year + \"-\" + calendar.month + \"-\" + weekIdx;\n\n        if (!dateObj) {\n          return React.createElement(CalendarCell, {\n            key: key\n          });\n        }\n\n        var selectable = dateObj.selectable && filterDate(dateObj.date);\n        var shortDate = getShortDate(dateObj.date);\n        return React.createElement(CalendarCell, Object.assign({\n          key: key\n        }, dateObj, getDateProps({\n          dateObj: _extends({}, dateObj, {\n            selectable: selectable\n          })\n        }), {\n          \"data-testid\": \"datepicker-cell-\" + shortDate,\n          selectable: selectable\n        }), dateObj.date.getDate());\n      });\n    })));\n  })), showToday && React.createElement(TodayButton, Object.assign({}, getToday(minDate, maxDate), getDateProps({\n    dateObj: getToday(minDate, maxDate)\n  })), todayButton));\n};\n\nCalendar.defaultProps = {\n  pointing: 'left',\n  showToday: true\n};\n\nvar CustomInput = function CustomInput(_ref) {\n  var icon = _ref.icon,\n      isClearIconVisible = _ref.isClearIconVisible,\n      onClear = _ref.onClear,\n      onClick = _ref.onClick,\n      value = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"icon\", \"isClearIconVisible\", \"onClear\", \"onClick\", \"value\"]);\n\n  return React.createElement(Form.Input, Object.assign({\n    \"data-testid\": \"datepicker-input\"\n  }, rest, {\n    icon: React.createElement(Icon, {\n      \"data-testid\": \"datepicker-icon\",\n      link: true,\n      name: isClearIconVisible ? 'close' : icon,\n      onClick: isClearIconVisible ? onClear : onClick\n    }),\n    onClick: onClick,\n    value: value\n  }));\n};\n\nCustomInput.defaultProps = {\n  icon: 'calendar'\n};\nvar style$1 = {\n  display: 'inline-block',\n  position: 'relative'\n};\nvar semanticInputProps = ['disabled', 'error', 'icon', 'iconPosition', 'id', 'label', 'loading', 'name', 'onBlur', 'onChange', 'onClick', 'onContextMenu', 'onDoubleClick', 'onFocus', 'onInput', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'placeholder', 'required', 'size', 'transparent', 'readOnly'];\n\nvar SemanticDatepicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(SemanticDatepicker, _React$Component);\n\n  function SemanticDatepicker() {\n    var _this;\n\n    _this = _React$Component.apply(this, arguments) || this;\n    _this.el = React.createRef();\n    _this.state = _this.initialState;\n    _this.Component = _this.isRangeInput ? RangeDatePicker : DatePicker;\n\n    _this.resetState = function (event) {\n      var _this$props = _this.props,\n          keepOpenOnClear = _this$props.keepOpenOnClear,\n          onChange = _this$props.onChange;\n      var newState = {\n        isVisible: keepOpenOnClear,\n        selectedDate: _this.isRangeInput ? [] : null,\n        selectedDateFormatted: ''\n      };\n\n      _this.setState(newState, function () {\n        onChange(event, _extends({}, _this.props, {\n          value: null\n        }));\n      });\n    };\n\n    _this.mousedownCb = function (mousedownEvent) {\n      var isVisible = _this.state.isVisible;\n\n      if (isVisible && _this.el) {\n        if (_this.el.current && !_this.el.current.contains(mousedownEvent.target)) {\n          _this.close();\n        }\n      }\n    };\n\n    _this.keydownCb = function (keydownEvent) {\n      var isVisible = _this.state.isVisible;\n\n      if (keydownEvent.keyCode === 27 && isVisible) {\n        // Escape\n        _this.close();\n      }\n    };\n\n    _this.close = function () {\n      window.removeEventListener('keydown', _this.keydownCb);\n      window.removeEventListener('mousedown', _this.mousedownCb);\n\n      _this.setState({\n        isVisible: false\n      });\n    };\n\n    _this.showCalendar = function (event) {\n      event.preventDefault();\n      window.addEventListener('mousedown', _this.mousedownCb);\n      window.addEventListener('keydown', _this.keydownCb);\n\n      _this.setState({\n        isVisible: true\n      });\n    };\n\n    _this.handleRangeInput = function (newDates, event) {\n      var _this$props2 = _this.props,\n          format = _this$props2.format,\n          keepOpenOnSelect = _this$props2.keepOpenOnSelect,\n          onChange = _this$props2.onChange;\n\n      if (!newDates || !newDates.length) {\n        _this.resetState(event);\n\n        return;\n      }\n\n      var newState = {\n        selectedDate: newDates,\n        selectedDateFormatted: formatSelectedDate(newDates, format),\n        typedValue: null\n      };\n\n      _this.setState(newState, function () {\n        onChange(event, _extends({}, _this.props, {\n          value: newDates\n        }));\n\n        if (newDates.length === 2) {\n          _this.setState({\n            isVisible: keepOpenOnSelect\n          });\n        }\n      });\n    };\n\n    _this.handleBasicInput = function (newDate, event) {\n      var _this$props3 = _this.props,\n          format = _this$props3.format,\n          keepOpenOnSelect = _this$props3.keepOpenOnSelect,\n          onChange = _this$props3.onChange,\n          clearOnSameDateClick = _this$props3.clearOnSameDateClick;\n\n      if (!newDate) {\n        // if clearOnSameDateClick is true (this is the default case)\n        // then reset the state. This is what was previously the default\n        // behavior, without a specific prop.\n        if (clearOnSameDateClick) {\n          _this.resetState(event);\n        } else {\n          // Don't reset the state. Instead, close or keep open the\n          // datepicker according to the value of keepOpenOnSelect.\n          // Essentially, follow the default behavior of clicking a date\n          // but without changing the value in state.\n          _this.setState({\n            isVisible: keepOpenOnSelect\n          });\n        }\n\n        return;\n      }\n\n      var newState = {\n        isVisible: keepOpenOnSelect,\n        selectedDate: newDate,\n        selectedDateFormatted: formatSelectedDate(newDate, format),\n        typedValue: null\n      };\n\n      _this.setState(newState, function () {\n        onChange(event, _extends({}, _this.props, {\n          value: newDate\n        }));\n      });\n    };\n\n    _this.handleBlur = function (event) {\n      var _this$props4 = _this.props,\n          format = _this$props4.format,\n          onBlur = _this$props4.onBlur;\n      var typedValue = _this.state.typedValue;\n      onBlur(event);\n\n      if (!typedValue) {\n        return;\n      }\n\n      var parsedValue = parseOnBlur(String(typedValue), format, _this.isRangeInput);\n\n      if (_this.isRangeInput) {\n        var areDatesValid = parsedValue.every(isValid);\n\n        if (areDatesValid) {\n          _this.handleRangeInput(parsedValue, event);\n\n          return;\n        }\n      } else {\n        var isDateValid = isValid(parsedValue);\n\n        if (isDateValid) {\n          _this.handleBasicInput(parsedValue, event);\n\n          return;\n        }\n      }\n\n      _this.setState({\n        typedValue: null\n      });\n    };\n\n    _this.handleChange = function (event, _ref) {\n      var value = _ref.value;\n      var _this$props5 = _this.props,\n          allowOnlyNumbers = _this$props5.allowOnlyNumbers,\n          format = _this$props5.format,\n          onChange = _this$props5.onChange;\n      var formatString = _this.isRangeInput ? format + \" - \" + format : format;\n      var typedValue = allowOnlyNumbers ? onlyNumbers(value) : value;\n\n      if (!typedValue) {\n        var newState = {\n          selectedDate: _this.isRangeInput ? [] : null,\n          selectedDateFormatted: '',\n          typedValue: null\n        };\n\n        _this.setState(newState, function () {\n          onChange(event, _extends({}, _this.props, {\n            value: null\n          }));\n        });\n\n        return;\n      }\n\n      _this.setState({\n        selectedDate: _this.isRangeInput ? [] : null,\n        selectedDateFormatted: '',\n        typedValue: formatStringByPattern(formatString, typedValue)\n      });\n    };\n\n    _this.handleKeyDown = function (evt) {\n      // If the Enter key was pressed...\n      if (evt.keyCode === 13) {\n        _this.handleBlur();\n      }\n    };\n\n    _this.onDateSelected = function (event, dateOrDates) {\n      if (_this.isRangeInput) {\n        _this.handleRangeInput(dateOrDates, event);\n      } else {\n        _this.handleBasicInput(dateOrDates, event);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = SemanticDatepicker.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props6 = this.props,\n        locale = _this$props6.locale,\n        value = _this$props6.value;\n\n    if (!isEqual(value, prevProps.value)) {\n      this.onDateSelected(undefined, value);\n    }\n\n    if (locale !== prevProps.locale) {\n      this.setState({\n        locale: this.locale\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$state = this.state,\n        isVisible = _this$state.isVisible,\n        locale = _this$state.locale,\n        selectedDate = _this$state.selectedDate,\n        selectedDateFormatted = _this$state.selectedDateFormatted,\n        typedValue = _this$state.typedValue;\n    var _this$props7 = this.props,\n        clearable = _this$props7.clearable,\n        pointing = _this$props7.pointing,\n        filterDate = _this$props7.filterDate,\n        readOnly = _this$props7.readOnly,\n        datePickerOnly = _this$props7.datePickerOnly;\n    return React.createElement(\"div\", {\n      className: \"field\",\n      style: style$1,\n      ref: this.el\n    }, React.createElement(CustomInput, Object.assign({}, this.inputProps, {\n      isClearIconVisible: Boolean(clearable && selectedDateFormatted),\n      onBlur: this.handleBlur,\n      onChange: this.handleChange,\n      onClear: this.resetState,\n      onClick: readOnly ? null : this.showCalendar,\n      onKeyDown: this.handleKeyDown,\n      value: typedValue || selectedDateFormatted,\n      readOnly: readOnly || datePickerOnly\n    })), isVisible && React.createElement(this.Component, Object.assign({}, this.dayzedProps, {\n      monthsToDisplay: this.isRangeInput ? 2 : 1,\n      onChange: this.onDateSelected,\n      selected: selectedDate,\n      date: this.date\n    }), function (props) {\n      return React.createElement(Calendar, Object.assign({}, _this2.dayzedProps, props, locale, {\n        filterDate: filterDate,\n        pointing: pointing,\n        weekdays: _this2.weekdays\n      }));\n    }));\n  };\n\n  _createClass(SemanticDatepicker, [{\n    key: \"isRangeInput\",\n    get: function get() {\n      return this.props.type === 'range';\n    }\n  }, {\n    key: \"initialState\",\n    get: function get() {\n      var _this$props8 = this.props,\n          format = _this$props8.format,\n          value = _this$props8.value;\n      var initialSelectedDate = this.isRangeInput ? [] : null;\n      return {\n        isVisible: false,\n        locale: this.locale,\n        selectedDate: value || initialSelectedDate,\n        selectedDateFormatted: formatSelectedDate(value, format),\n        typedValue: null\n      };\n    }\n  }, {\n    key: \"dayzedProps\",\n    get: function get() {\n      return omit(semanticInputProps, this.props);\n    }\n  }, {\n    key: \"inputProps\",\n    get: function get() {\n      var props = pick(semanticInputProps, this.props);\n      var placeholder = props.placeholder || this.props.format;\n      return _extends({}, props, {\n        placeholder: placeholder\n      });\n    }\n  }, {\n    key: \"date\",\n    get: function get() {\n      var selectedDate = this.state.selectedDate;\n      var date = this.props.date;\n\n      if (!selectedDate) {\n        return date;\n      }\n\n      return this.isRangeInput ? selectedDate[0] : selectedDate || date;\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      var locale = this.props.locale;\n      var localeJson;\n\n      try {\n        localeJson = require(\"./locales/\" + locale + \".json\");\n      } catch (e) {\n        console.warn(\"\\\"\" + locale + \"\\\" is not a valid locale\");\n        localeJson = require('./locales/en-US.json');\n      }\n\n      return localeJson;\n    }\n  }, {\n    key: \"weekdays\",\n    get: function get() {\n      var firstDayOfWeek = this.dayzedProps.firstDayOfWeek;\n      var weekdays = this.state.locale.weekdays;\n      return moveElementsByN(firstDayOfWeek, weekdays);\n    }\n  }]);\n\n  return SemanticDatepicker;\n}(React.Component);\n\nSemanticDatepicker.defaultProps = {\n  allowOnlyNumbers: false,\n  clearOnSameDateClick: true,\n  clearable: true,\n  date: undefined,\n  filterDate: function filterDate() {\n    return true;\n  },\n  firstDayOfWeek: 0,\n  format: 'YYYY-MM-DD',\n  id: undefined,\n  keepOpenOnClear: false,\n  keepOpenOnSelect: false,\n  label: undefined,\n  locale: 'en-US',\n  name: undefined,\n  onBlur: function onBlur() {},\n  onChange: function onChange() {},\n  placeholder: null,\n  pointing: 'left',\n  readOnly: false,\n  datePickerOnly: false,\n  required: false,\n  showOutsideDays: false,\n  type: 'basic',\n  value: null\n};\nexport default SemanticDatepicker;","map":null,"metadata":{},"sourceType":"module"}